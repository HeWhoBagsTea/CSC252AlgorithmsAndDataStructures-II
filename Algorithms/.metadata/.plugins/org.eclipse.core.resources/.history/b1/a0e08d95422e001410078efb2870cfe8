
public class DotsAndBoxes {
	private int rows;
	private int cols;
	private int scoreP1;
	private int scoreP2;
	public Graph graph;
	
	DotsAndBoxes(int rows, int columns) {
		this.rows = rows;
		this.cols = columns;
		this.scoreP1 = 0;
		this.scoreP2 = 0;
		this.graph = new Graph((rows + 1) * (cols + 1));
	}
	
	// draws a line from (x1, y1) to (x2, y2) (0,0) is in the upper-left corner, returning how many points were earned, if any
	public int drawLine(int player, int x1, int y1, int x2, int y2) {
		int pointsScored = -1;
		
		if((x2 != x1 && y2 != y1 + 1) || (x2 != x1 && y2 != y1 - 1) || (x2 != x1 + 1 && y2 != y1 ) || (x2 != x1 - 1 && y2 != y1))
			System.out.println("Hit");
		
		if((player != 1 && player != 2) || x1 < 0 || x2 < 0 || y1 < 0 || y2 < 0 || x1 > cols || x2 > cols || y1 > rows || y2 > rows) {
			System.out.println("Invalid Move");
			return pointsScored;
		}
		
		graph.addEdge(((cols + 1) * y1) + x1, ((cols + 1) * y2) + x2, 1);
		
		pointsScored = 0;
		//Scoring Stuff
		
		
		if(player == 1)
			scoreP1 += pointsScored;
		if(player == 2)
			scoreP2 += pointsScored;
		
		return pointsScored;
	}
	
	// returns the score for a player
	public int score(int player) {
		if(player == 1) return scoreP1;
		if(player == 2) return scoreP2;
		
		System.out.println("Invalid Player");
		return 0;
	}
	
	// returns whether or not there are any lines to be drawn
	public boolean areMovesLeft() {
		return this.graph.ecount() < (cols * (2 * rows + 1) + rows);
	}
	
	// returns the number of double-crosses on the board
	public int countDoubleCrosses() {
		return 0;
	}
	
	// returns the number of cycles on the board
	public int countCycles() {
		return 0;
	}
	
	// returns the number of open chains on the board
	public int countOpenChains() {
		return 0;
	}


}
