
public class AVLBasedPriorityQueue<T extends Comparable> {
	Node<T> root = null;


	public boolean offer(T data) {
		Node<T> offered = new Node<T>(data);
		Node<T> checkAgainst = root;
		boolean added = false;

		if(root == null) {
			root = offered;
			added = true;
		}
		else {
			while(!added) {
				if(data.compareTo(checkAgainst.value) < 0 && checkAgainst.left == null) {
					checkAgainst.left = offered;
					added = true;
				}
				else if (data.compareTo(checkAgainst.value) >= 0 && checkAgainst.right == null) {
					checkAgainst.right = offered;
					added = true;
				}
				else if(data.compareTo(checkAgainst.value) < 0) {
					checkAgainst = checkAgainst.left;
				}
				else if(data.compareTo(checkAgainst.value) < 0) {
					checkAgainst = checkAgainst.right;
				}
			}
		}

		return added;
	}

	public T peek() {
		return null;

	}

	public T poll() {
		return null;

	}
}
