import java.util.Iterator;

public class PriorityQueue<T extends Comparable> implements Queue<T > {

	PqNode<T> head;
	PqNode<T> tail;

	public Iterator<T> iterator() {
		return null;
	}

	public T poll() {
		PqNode<T> temp = head;

		if(head != null)
			head = head.next;

		return (T)temp.value;
	}

	@SuppressWarnings("unchecked")
	public boolean offer(T t) {
		boolean valueAdded = false;
		PqNode<T> newNode = new PqNode<T>(t);

		if(head == null)
		{
			head = newNode;
			tail = head;
		}
		else if(t.compareTo(head.value) <= 0)
		{
			PqNode<T> temp = head;
			head = newNode;
			head.next = temp;
		}
		else
		{
			if(head.next.value != null)
			{
				PqNode<T> current = head.next;
				PqNode<T> previous = head; 
				do
					if(t.compareTo(current.value) == 1)
					{
						previous = current;
						current = current.next;
					}
					else if(t.compareTo((current.value)) <= 0)
					{
						PqNode<T> temp = newNode;
						temp.next = current;
						previous.next = temp;
						
					}
				while(current.next != null);
			}
			else
			{
				tail.next = newNode;
				tail = tail.next;
			}			
		}
		
		valueAdded = true;
		return valueAdded;
	}

	public T peek() {
		return (T) head.value;
	}
}
